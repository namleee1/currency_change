# -*- coding: utf-8 -*-
"""predict currency conversion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iGmqSxYIqzQQsq8HSvbbOaduYURhmeTP
"""

import streamlit as st
import pandas as pd

# Tải file lên Streamlit
uploaded_file = st.file_uploader("Data system POC_11Nov2024(mod).xlsx", type=["xlsx", "xls"])

if uploaded_file is not None:
    # Đọc file Excel
    df_ref = pd.read_excel(uploaded_file, sheet_name="Data- refinitiv")
    df1 = pd.read_excel(uploaded_file, sheet_name="Sheet2")

    # Hiển thị dataframe
    st.write(df)

df.isna().sum()

df.duplicated()

df=df.fillna(method='ffill')

df.tail(10)

plt.plot(df['Date'],df['VND'])
plt.xlabel('Date')
plt.ylabel('VND= (BID)')
plt.title('changing of currency conversion after years')
plt.show()

plt.plot(df['Date'],df['FEDRATE'])
plt.xlabel('Date')
plt.ylabel('FED RATE')
plt.title('FED RATE changes after years')
plt.show()

plt.plot(df['Date'],df['DXY'])
plt.xlabel('Date')
plt.ylabel('DXY')
plt.title('DXY changes after years')
plt.show()

plt.plot(df['Date'],df['OMOrate'])
plt.xlabel('Date')
plt.ylabel('OMO rate')
plt.title('OMO rate changes after years')
plt.figure(figsize=(40,4))
plt.show()

plt.plot(df['Date'],df['SBVcentralrate'])
plt.xlabel('Date')
plt.ylabel('SBV central rate')
plt.title('SBV central rate change after years')
plt.figure(figsize=(40,4))
plt.show()

name=input("Mời nhập tên chỉ số muốn xem dữ liệu lịch sử:(FEDRATE,DXY,VND,OMOrate,SBVcentralrate)")
n=int(input("Mời nhập số ngày muốn xem:"))
file_path = "/content/Data system POC_11Nov2024(mod).xlsx"
df = pd.read_excel(file_path, sheet_name=None)  # Đọc tất cả sheet
df_ref = df["Data- refinitiv"]
if name== 'FEDRATE' :
    print(df_ref['Date'].iloc[:n],df_ref['FEDRATE'].iloc[:n], sep='\n') # Print each value on a new line
elif name=='DXY' :
   print(df_ref['Date'].iloc[:n],df_ref['DXY'].iloc[:n], sep='\n') # Change here: Use df_ref to access the column
elif name=='VND' :
   print(df_ref['Date'].iloc[:n],df_ref['VND'].iloc[:n], sep='\n') # Change here: Use df_ref to access the column
elif name=='OMOrate' :
   print(df_ref['Date'].iloc[:n],df_ref['OMOrate'].iloc[:n], sep='\n') # Change here: Use df_ref to access the column
elif name=='SBVcentralrate' :
   print(df_ref['Date'].iloc[:n],df_ref['SBVcentralrate'].iloc[:n], sep='\n') # Change here: Use df_ref to access the column

def train_sarima(df_ref, n):

    # Đảm bảo dữ liệu sắp xếp theo ngày
    train_values = df_ref["VND"].dropna().astype(float).sort_index()
    history = list(train_values)

    predictions = []
    labels = []
    percent_changes = []

    for _ in range(n):
        model = SARIMAX(history, order=(2,1,0))
        model_fit = model.fit(disp=False)

        forecast = model_fit.forecast(steps=1)[0]
        prev_value = history[-1]

        trend = "Up" if forecast > prev_value else "Down"
        labels.append(trend)

        percent_change = ((forecast - prev_value) / prev_value * 100) if prev_value != 0 else 0
        percent_changes.append(percent_change)

        history.append(forecast)
        predictions.append(forecast)

    return predictions, labels, percent_changes

# Đọc dữ liệu từ file Excel (chỉ đọc 1 lần)

df_ref["Date"] = pd.to_datetime(df_ref["Date"])
df_ref.set_index("Date", inplace=True)

df1["Date"] = pd.to_datetime(df1["Date"])
df1.set_index("Date", inplace=True)

# Người dùng nhập số ngày cần dự báo
n = int(input("Nhập số ngày cần dự báo: "))

# Chạy mô hình SARIMA
predictions, labels, percent_changes = train_sarima(df_ref, n)

# Xuất kết quả
print("\n📊 **Dự báo giá trị VND:**", predictions)
print("\n📈 **Xu hướng biến động:**", labels)
print("\n📉 **Tỷ lệ thay đổi (%):**", percent_changes)

# Lấy giá trị thực tế để so sánh
df1["VND"] = df1["VND"].apply(lambda x: float(str(x).replace("\xa0", "")))
Y_TRUE = df1["VND"].iloc[:n].tolist()
print("\n**Giá trị thực tế:**", Y_TRUE)
# Xác định ngày bắt đầu dự báo
last_date = df_ref.index[0]  # Ngày cuối của tập dữ liệu huấn luyện
forecast_dates = pd.date_range(start=last_date, periods=n+1, freq='D')[1:]

# **VẼ BIỂU ĐỒ GIÁ LỊCH SỬ + DỰ BÁO + GIÁ THẬT**
plt.figure(figsize=(14, 6))

#  **Vẽ đường giá dự báo**
plt.plot(forecast_dates, predictions, color='black', linestyle='-', marker='o', label="Dự báo")

# **Vẽ đường giá thật**
plt.plot(forecast_dates, Y_TRUE, color='red', linestyle='--', marker='x', label="Giá thật")

plt.xlabel("Ngày")
plt.ylabel("Giá VND")
plt.title("Biểu đồ giá VND - Lịch sử vs Dự báo vs Thực tế")
plt.legend()
plt.grid(True)
plt.show()

# 🔹 Nhập email người nhận
EMAIL_RECEIVER = input('Mời bạn nhập vào email người nhận: ')

# 🔹 Lấy mật khẩu từ biến môi trường (Không lưu trực tiếp trong code)
EMAIL_SENDER = "namltmta@gmail.com"
EMAIL_PASSWORD = "jlxk sqlk gckc eqzz"

# 🔹 Giả lập dự báo tỷ giá (dữ liệu mẫu)
forecast_dates = forecast_dates
predictions = predictions

# 🔹 Tạo nội dung email
email_content = "<h2>Dự báo tỷ giá VND-USD tuần tới</h2><table border='1' cellpadding='5'>"
email_content += "<tr><th>Ngày</th><th>Dự đoán giá</th></tr>"

for date, price in zip(forecast_dates, predictions):
    email_content += f"<tr><td>{date.strftime('%Y-%m-%d')}</td><td>{price:.2f} USD</td></tr>"

email_content += "</table>"

# 🔹 Thiết lập email
msg = MIMEMultipart()
msg['From'] = EMAIL_SENDER
msg['To'] = EMAIL_RECEIVER
msg['Subject'] = "Báo cáo dự báo tỷ giá VND-USD tuần tới"
msg.attach(MIMEText(email_content, 'html'))

# 🔹 Gửi email qua SMTP (Gmail SMTP Server)
try:
    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.starttls()
    server.login(EMAIL_SENDER, EMAIL_PASSWORD)
    server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
    server.quit()
    print("✅ Email đã được gửi thành công!")
except Exception as e:
    print("❌ Lỗi khi gửi email:", str(e))

















